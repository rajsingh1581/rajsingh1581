
Test_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000287c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a50  08002a50  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a50  08002a50  00003a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a58  08002a58  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00003a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00003a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002a6c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002a6c  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c69  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000170e  00000000  00000000  0000dca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000f3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000067b  00000000  00000000  0000fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186e3  00000000  00000000  000102ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0b6  00000000  00000000  0002898e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad31  00000000  00000000  00032a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd775  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b0  00000000  00000000  000cd7b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000cf968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080029f0 	.word	0x080029f0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080029f0 	.word	0x080029f0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fa0c 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f812 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f890 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f85e 	bl	800058c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <main+0x2c>)
 80004d6:	f000 fd11 	bl	8000efc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80004da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004de:	f000 fa79 	bl	80009d4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004e2:	bf00      	nop
 80004e4:	e7f4      	b.n	80004d0 <main+0x14>
 80004e6:	bf00      	nop
 80004e8:	48000400 	.word	0x48000400

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b096      	sub	sp, #88	@ 0x58
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2244      	movs	r2, #68	@ 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fa4b 	bl	8002996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000512:	f000 fd1b 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051c:	f000 f8f0 	bl	8000700 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000520:	2310      	movs	r3, #16
 8000522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800052c:	2360      	movs	r3, #96	@ 0x60
 800052e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2302      	movs	r3, #2
 8000532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000534:	2301      	movs	r3, #1
 8000536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800053c:	2328      	movs	r3, #40	@ 0x28
 800053e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000540:	2302      	movs	r3, #2
 8000542:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fd53 	bl	8000ff8 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000558:	f000 f8d2 	bl	8000700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2303      	movs	r3, #3
 8000562:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	2104      	movs	r1, #4
 8000574:	4618      	mov	r0, r3
 8000576:	f001 f9a1 	bl	80018bc <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000580:	f000 f8be 	bl	8000700 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3758      	adds	r7, #88	@ 0x58
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 8000592:	4a15      	ldr	r2, [pc, #84]	@ (80005e8 <MX_USART2_UART_Init+0x5c>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_USART2_UART_Init+0x58>)
 80005d0:	f001 fd1e 	bl	8002010 <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005da:	f000 f891 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b3c      	ldr	r3, [pc, #240]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a3b      	ldr	r2, [pc, #236]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b39      	ldr	r3, [pc, #228]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	4b36      	ldr	r3, [pc, #216]	@ (80006f4 <MX_GPIO_Init+0x108>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a35      	ldr	r2, [pc, #212]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b33      	ldr	r3, [pc, #204]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b30      	ldr	r3, [pc, #192]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a2f      	ldr	r2, [pc, #188]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <MX_GPIO_Init+0x108>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <MX_GPIO_Init+0x108>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	21b0      	movs	r1, #176	@ 0xb0
 8000666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066a:	f000 fc2f 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000674:	4820      	ldr	r0, [pc, #128]	@ (80006f8 <MX_GPIO_Init+0x10c>)
 8000676:	f000 fc29 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000680:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	481a      	ldr	r0, [pc, #104]	@ (80006fc <MX_GPIO_Init+0x110>)
 8000692:	f000 faa9 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000696:	23b0      	movs	r3, #176	@ 0xb0
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f000 fa9a 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80006b4:	2340      	movs	r3, #64	@ 0x40
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ca:	f000 fa8d 	bl	8000be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_GPIO_Init+0x10c>)
 80006e8:	f000 fa7e 	bl	8000be8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3728      	adds	r7, #40	@ 0x28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400
 80006fc:	48000800 	.word	0x48000800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <Error_Handler+0x8>

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	@ 0x60
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	@ 0x58
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	@ 0x58
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2234      	movs	r2, #52	@ 0x34
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f002 f90e 	bl	8002996 <memset>
  if(huart->Instance==USART2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1f      	ldr	r2, [pc, #124]	@ (80007fc <HAL_UART_MspInit+0xa8>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d136      	bne.n	80007f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000784:	2302      	movs	r3, #2
 8000786:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fab7 	bl	8001d04 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800079c:	f7ff ffb0 	bl	8000700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a4:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d0:	230c      	movs	r3, #12
 80007d2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f000 f9fb 	bl	8000be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f2:	bf00      	nop
 80007f4:	3758      	adds	r7, #88	@ 0x58
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40004400 	.word	0x40004400
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <MemManage_Handler+0x4>

0800081c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <BusFault_Handler+0x4>

08000824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <UsageFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085a:	f000 f89b 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800088c:	f7ff ffea 	bl	8000864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 f877 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ba:	f7ff fdff 	bl	80004bc <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	08002a60 	.word	0x08002a60
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	200000b4 	.word	0x200000b4

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_Init+0x3c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <HAL_Init+0x3c>)
 80008ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 f944 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f8:	2000      	movs	r0, #0
 80008fa:	f000 f80f 	bl	800091c <HAL_InitTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	e001      	b.n	800090e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800090a:	f7ff feff 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090e:	79fb      	ldrb	r3, [r7, #7]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <HAL_InitTick+0x6c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d023      	beq.n	8000978 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_InitTick+0x70>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <HAL_InitTick+0x6c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f941 	bl	8000bce <HAL_SYSTICK_Config>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10f      	bne.n	8000972 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d809      	bhi.n	800096c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f000 f919 	bl	8000b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000964:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <HAL_InitTick+0x74>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	e007      	b.n	800097c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	e004      	b.n	800097c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e001      	b.n	800097c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008
 80009b8:	200000b0 	.word	0x200000b0

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	@ (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200000b0 	.word	0x200000b0

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	@ 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff47 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff5c 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff8e 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5d 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffb0 	bl	8000b3c <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e14e      	b.n	8000e96 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8140 	beq.w	8000e90 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	6939      	ldr	r1, [r7, #16]
 8000d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0203 	and.w	r2, r3, #3
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 809a 	beq.w	8000e90 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b55      	ldr	r3, [pc, #340]	@ (8000eb4 <HAL_GPIO_Init+0x2cc>)
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d60:	4a54      	ldr	r2, [pc, #336]	@ (8000eb4 <HAL_GPIO_Init+0x2cc>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d68:	4b52      	ldr	r3, [pc, #328]	@ (8000eb4 <HAL_GPIO_Init+0x2cc>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d74:	4a50      	ldr	r2, [pc, #320]	@ (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d9e:	d013      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e0>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a46      	ldr	r2, [pc, #280]	@ (8000ebc <HAL_GPIO_Init+0x2d4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d00d      	beq.n	8000dc4 <HAL_GPIO_Init+0x1dc>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a45      	ldr	r2, [pc, #276]	@ (8000ec0 <HAL_GPIO_Init+0x2d8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <HAL_GPIO_Init+0x1d8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a44      	ldr	r2, [pc, #272]	@ (8000ec4 <HAL_GPIO_Init+0x2dc>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d101      	bne.n	8000dbc <HAL_GPIO_Init+0x1d4>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	e004      	b.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_GPIO_Init+0x1e2>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dda:	4937      	ldr	r1, [pc, #220]	@ (8000eb8 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de8:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e36:	4a24      	ldr	r2, [pc, #144]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e60:	4a19      	ldr	r2, [pc, #100]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <HAL_GPIO_Init+0x2e0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f47f aea9 	bne.w	8000bf8 <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f0e:	887a      	ldrh	r2, [r7, #2]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4013      	ands	r3, r2
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43d9      	mvns	r1, r3
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	619a      	str	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f34:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f5a:	d130      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000f68:	d038      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f72:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2232      	movs	r2, #50	@ 0x32
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f90:	e002      	b.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fa4:	d102      	bne.n	8000fac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f2      	bne.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb8:	d110      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e00f      	b.n	8000fde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fca:	d007      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fd4:	4a05      	ldr	r2, [pc, #20]	@ (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 bc4f 	b.w	80018aa <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100c:	4b97      	ldr	r3, [pc, #604]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001016:	4b95      	ldr	r3, [pc, #596]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80e6 	beq.w	80011fa <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c>
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	f040 808d 	bne.w	8001156 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	2b01      	cmp	r3, #1
 8001040:	f040 8089 	bne.w	8001156 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001044:	4b89      	ldr	r3, [pc, #548]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d006      	beq.n	800105e <HAL_RCC_OscConfig+0x66>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	f000 bc26 	b.w	80018aa <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001062:	4b82      	ldr	r3, [pc, #520]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d004      	beq.n	8001078 <HAL_RCC_OscConfig+0x80>
 800106e:	4b7f      	ldr	r3, [pc, #508]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001076:	e005      	b.n	8001084 <HAL_RCC_OscConfig+0x8c>
 8001078:	4b7c      	ldr	r3, [pc, #496]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 800107a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001084:	4293      	cmp	r3, r2
 8001086:	d224      	bcs.n	80010d2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fdd9 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d002      	beq.n	800109e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	f000 bc06 	b.w	80018aa <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109e:	4b73      	ldr	r3, [pc, #460]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a72      	ldr	r2, [pc, #456]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b70      	ldr	r3, [pc, #448]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b6:	496d      	ldr	r1, [pc, #436]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010bc:	4b6b      	ldr	r3, [pc, #428]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	4968      	ldr	r1, [pc, #416]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
 80010d0:	e025      	b.n	800111e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d2:	4b66      	ldr	r3, [pc, #408]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a65      	ldr	r2, [pc, #404]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	4b63      	ldr	r3, [pc, #396]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	4960      	ldr	r1, [pc, #384]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f0:	4b5e      	ldr	r3, [pc, #376]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	495b      	ldr	r1, [pc, #364]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd98 	bl	8001c44 <RCC_SetFlashLatencyFromMSIRange>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e3c5      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800111e:	f000 fccd 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001122:	4602      	mov	r2, r0
 8001124:	4b51      	ldr	r3, [pc, #324]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	4950      	ldr	r1, [pc, #320]	@ (8001270 <HAL_RCC_OscConfig+0x278>)
 8001130:	5ccb      	ldrb	r3, [r1, r3]
 8001132:	f003 031f 	and.w	r3, r3, #31
 8001136:	fa22 f303 	lsr.w	r3, r2, r3
 800113a:	4a4e      	ldr	r2, [pc, #312]	@ (8001274 <HAL_RCC_OscConfig+0x27c>)
 800113c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800113e:	4b4e      	ldr	r3, [pc, #312]	@ (8001278 <HAL_RCC_OscConfig+0x280>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fbea 	bl	800091c <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d052      	beq.n	80011f8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	e3a9      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d032      	beq.n	80011c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800115e:	4b43      	ldr	r3, [pc, #268]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a42      	ldr	r2, [pc, #264]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800116a:	f7ff fc27 	bl	80009bc <HAL_GetTick>
 800116e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001172:	f7ff fc23 	bl	80009bc <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e392      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001190:	4b36      	ldr	r3, [pc, #216]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a35      	ldr	r2, [pc, #212]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	4930      	ldr	r1, [pc, #192]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	492b      	ldr	r1, [pc, #172]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
 80011c2:	e01a      	b.n	80011fa <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a28      	ldr	r2, [pc, #160]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbf4 	bl	80009bc <HAL_GetTick>
 80011d4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d8:	f7ff fbf0 	bl	80009bc <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e35f      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1e0>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d073      	beq.n	80012ee <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	2b08      	cmp	r3, #8
 800120a:	d005      	beq.n	8001218 <HAL_RCC_OscConfig+0x220>
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d10e      	bne.n	8001230 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d10b      	bne.n	8001230 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d063      	beq.n	80012ec <HAL_RCC_OscConfig+0x2f4>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d15f      	bne.n	80012ec <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e33c      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x250>
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e025      	b.n	8001294 <HAL_RCC_OscConfig+0x29c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001250:	d114      	bne.n	800127c <HAL_RCC_OscConfig+0x284>
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a02      	ldr	r2, [pc, #8]	@ (800126c <HAL_RCC_OscConfig+0x274>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e013      	b.n	8001294 <HAL_RCC_OscConfig+0x29c>
 800126c:	40021000 	.word	0x40021000
 8001270:	08002a08 	.word	0x08002a08
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004
 800127c:	4b8f      	ldr	r3, [pc, #572]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a8e      	ldr	r2, [pc, #568]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b8c      	ldr	r3, [pc, #560]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a8b      	ldr	r2, [pc, #556]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800128e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129c:	f7ff fb8e 	bl	80009bc <HAL_GetTick>
 80012a0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fb8a 	bl	80009bc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e2f9      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b6:	4b81      	ldr	r3, [pc, #516]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2ac>
 80012c2:	e014      	b.n	80012ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb7a 	bl	80009bc <HAL_GetTick>
 80012c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb76 	bl	80009bc <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	@ 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e2e5      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012de:	4b77      	ldr	r3, [pc, #476]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x2d4>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d060      	beq.n	80013bc <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x314>
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d119      	bne.n	800133a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d116      	bne.n	800133a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x32c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e2c2      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b65      	ldr	r3, [pc, #404]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	4962      	ldr	r1, [pc, #392]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	e040      	b.n	80013bc <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d023      	beq.n	800138a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001342:	4b5e      	ldr	r3, [pc, #376]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5d      	ldr	r2, [pc, #372]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fb35 	bl	80009bc <HAL_GetTick>
 8001352:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fb31 	bl	80009bc <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e2a0      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001368:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b51      	ldr	r3, [pc, #324]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	494e      	ldr	r1, [pc, #312]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]
 8001388:	e018      	b.n	80013bc <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b4c      	ldr	r3, [pc, #304]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a4b      	ldr	r2, [pc, #300]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff fb11 	bl	80009bc <HAL_GetTick>
 800139a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fb0d 	bl	80009bc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e27c      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b0:	4b42      	ldr	r3, [pc, #264]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8082 	beq.w	80014ce <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d05f      	beq.n	8001492 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699a      	ldr	r2, [r3, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d037      	beq.n	8001458 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e254      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01b      	beq.n	8001442 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001410:	4a2a      	ldr	r2, [pc, #168]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800141a:	f7ff facf 	bl	80009bc <HAL_GetTick>
 800141e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff facb 	bl	80009bc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b11      	cmp	r3, #17
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e23a      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ef      	bne.n	8001422 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001448:	f023 0210 	bic.w	r2, r3, #16
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	491a      	ldr	r1, [pc, #104]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001452:	4313      	orrs	r3, r2
 8001454:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145e:	4a17      	ldr	r2, [pc, #92]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff faa8 	bl	80009bc <HAL_GetTick>
 800146c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff faa4 	bl	80009bc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b11      	cmp	r3, #17
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e213      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ef      	beq.n	8001470 <HAL_RCC_OscConfig+0x478>
 8001490:	e01d      	b.n	80014ce <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001498:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_RCC_OscConfig+0x4c4>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa8b 	bl	80009bc <HAL_GetTick>
 80014a6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fa87 	bl	80009bc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b11      	cmp	r3, #17
 80014b6:	d903      	bls.n	80014c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e1f6      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
 80014bc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c0:	4ba9      	ldr	r3, [pc, #676]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ed      	bne.n	80014aa <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80bd 	beq.w	8001656 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014e2:	4ba1      	ldr	r3, [pc, #644]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10e      	bne.n	800150c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b9e      	ldr	r3, [pc, #632]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	4a9d      	ldr	r2, [pc, #628]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fa:	4b9b      	ldr	r3, [pc, #620]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001506:	2301      	movs	r3, #1
 8001508:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150c:	4b97      	ldr	r3, [pc, #604]	@ (800176c <HAL_RCC_OscConfig+0x774>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d118      	bne.n	800154a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001518:	4b94      	ldr	r3, [pc, #592]	@ (800176c <HAL_RCC_OscConfig+0x774>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a93      	ldr	r2, [pc, #588]	@ (800176c <HAL_RCC_OscConfig+0x774>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001524:	f7ff fa4a 	bl	80009bc <HAL_GetTick>
 8001528:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152c:	f7ff fa46 	bl	80009bc <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1b5      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800153e:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <HAL_RCC_OscConfig+0x774>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d02c      	beq.n	80015b0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001556:	4b84      	ldr	r3, [pc, #528]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001568:	497f      	ldr	r1, [pc, #508]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800156a:	4313      	orrs	r3, r2
 800156c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d010      	beq.n	800159e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800157c:	4b7a      	ldr	r3, [pc, #488]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001582:	4a79      	ldr	r2, [pc, #484]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800158c:	4b76      	ldr	r3, [pc, #472]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001592:	4a75      	ldr	r2, [pc, #468]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800159c:	e018      	b.n	80015d0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800159e:	4b72      	ldr	r3, [pc, #456]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a4:	4a70      	ldr	r2, [pc, #448]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015ae:	e00f      	b.n	80015d0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015b0:	4b6d      	ldr	r3, [pc, #436]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015c0:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a68      	ldr	r2, [pc, #416]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d016      	beq.n	8001606 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9f0 	bl	80009bc <HAL_GetTick>
 80015dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff f9ec 	bl	80009bc <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e159      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ed      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5e8>
 8001604:	e01d      	b.n	8001642 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff f9d9 	bl	80009bc <HAL_GetTick>
 800160a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff f9d5 	bl	80009bc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e142      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ed      	bne.n	800160e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001632:	4b4d      	ldr	r3, [pc, #308]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	4a4b      	ldr	r2, [pc, #300]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800163a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800163e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800164c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800164e:	4a46      	ldr	r2, [pc, #280]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b00      	cmp	r3, #0
 8001660:	d03c      	beq.n	80016dc <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800166a:	4b3f      	ldr	r3, [pc, #252]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001670:	4a3d      	ldr	r2, [pc, #244]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff f99f 	bl	80009bc <HAL_GetTick>
 800167e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001682:	f7ff f99b 	bl	80009bc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e10a      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001694:	4b34      	ldr	r3, [pc, #208]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ef      	beq.n	8001682 <HAL_RCC_OscConfig+0x68a>
 80016a2:	e01b      	b.n	80016dc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a4:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80016a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016aa:	4a2f      	ldr	r2, [pc, #188]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff f982 	bl	80009bc <HAL_GetTick>
 80016b8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016bc:	f7ff f97e 	bl	80009bc <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0ed      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016ce:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80016d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ef      	bne.n	80016bc <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 80e1 	beq.w	80018a8 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	f040 80b5 	bne.w	800185a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0203 	and.w	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	429a      	cmp	r2, r3
 8001702:	d124      	bne.n	800174e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170e:	3b01      	subs	r3, #1
 8001710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	429a      	cmp	r2, r3
 8001714:	d11b      	bne.n	800174e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d113      	bne.n	800174e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d109      	bne.n	800174e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	085b      	lsrs	r3, r3, #1
 8001746:	3b01      	subs	r3, #1
 8001748:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d05f      	beq.n	800180e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d05a      	beq.n	800180a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a03      	ldr	r2, [pc, #12]	@ (8001768 <HAL_RCC_OscConfig+0x770>)
 800175a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001760:	f7ff f92c 	bl	80009bc <HAL_GetTick>
 8001764:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001766:	e00c      	b.n	8001782 <HAL_RCC_OscConfig+0x78a>
 8001768:	40021000 	.word	0x40021000
 800176c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff f924 	bl	80009bc <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e093      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001782:	4b4c      	ldr	r3, [pc, #304]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178e:	4b49      	ldr	r3, [pc, #292]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <HAL_RCC_OscConfig+0x8c0>)
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800179e:	3a01      	subs	r2, #1
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	4311      	orrs	r1, r2
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017a8:	0212      	lsls	r2, r2, #8
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017b0:	0852      	lsrs	r2, r2, #1
 80017b2:	3a01      	subs	r2, #1
 80017b4:	0552      	lsls	r2, r2, #21
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017bc:	0852      	lsrs	r2, r2, #1
 80017be:	3a01      	subs	r2, #1
 80017c0:	0652      	lsls	r2, r2, #25
 80017c2:	430a      	orrs	r2, r1
 80017c4:	493b      	ldr	r1, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017ca:	4b3a      	ldr	r3, [pc, #232]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a39      	ldr	r2, [pc, #228]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017d4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4a36      	ldr	r2, [pc, #216]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017e2:	f7ff f8eb 	bl	80009bc <HAL_GetTick>
 80017e6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f8e7 	bl	80009bc <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e056      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fc:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001808:	e04e      	b.n	80018a8 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e04d      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d146      	bne.n	80018a8 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001820:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001824:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	4a22      	ldr	r2, [pc, #136]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 800182c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001830:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001832:	f7ff f8c3 	bl	80009bc <HAL_GetTick>
 8001836:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff f8bf 	bl	80009bc <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e02e      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x842>
 8001858:	e026      	b.n	80018a8 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d021      	beq.n	80018a4 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f8a6 	bl	80009bc <HAL_GetTick>
 8001870:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f8a2 	bl	80009bc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e011      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	4a07      	ldr	r2, [pc, #28]	@ (80018b4 <HAL_RCC_OscConfig+0x8bc>)
 8001898:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800189c:	f023 0303 	bic.w	r3, r3, #3
 80018a0:	60d3      	str	r3, [r2, #12]
 80018a2:	e001      	b.n	80018a8 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3728      	adds	r7, #40	@ 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	f99f808c 	.word	0xf99f808c

080018bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0e7      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d0:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d910      	bls.n	8001900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b72      	ldr	r3, [pc, #456]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 0207 	bic.w	r2, r3, #7
 80018e6:	4970      	ldr	r1, [pc, #448]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0cf      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b66      	ldr	r3, [pc, #408]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001918:	429a      	cmp	r2, r3
 800191a:	d908      	bls.n	800192e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4960      	ldr	r1, [pc, #384]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d04c      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b5a      	ldr	r3, [pc, #360]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d121      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0a6      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	4b54      	ldr	r3, [pc, #336]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e09a      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e08e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001982:	4b4a      	ldr	r3, [pc, #296]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e086      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b46      	ldr	r3, [pc, #280]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4943      	ldr	r1, [pc, #268]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a4:	f7ff f80a 	bl	80009bc <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f806 	bl	80009bc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e06e      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b3a      	ldr	r3, [pc, #232]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d208      	bcs.n	8001a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b2e      	ldr	r3, [pc, #184]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	492b      	ldr	r1, [pc, #172]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d210      	bcs.n	8001a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 0207 	bic.w	r2, r3, #7
 8001a18:	4923      	ldr	r1, [pc, #140]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e036      	b.n	8001aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4918      	ldr	r1, [pc, #96]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4910      	ldr	r1, [pc, #64]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a70:	f000 f824 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	f003 030f 	and.w	r3, r3, #15
 8001a80:	490b      	ldr	r1, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	f003 031f 	and.w	r3, r3, #31
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8001a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a90:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe ff41 	bl	800091c <HAL_InitTick>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08002a08 	.word	0x08002a08
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aca:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d121      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d11e      	bne.n	8001b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001afc:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	e005      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b18:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b34:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	e004      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b40:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	d134      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d003      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0xac>
 8001b60:	e005      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001b64:	617b      	str	r3, [r7, #20]
      break;
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b6a:	617b      	str	r3, [r7, #20]
      break;
 8001b6c:	e002      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	617b      	str	r3, [r7, #20]
      break;
 8001b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	3301      	adds	r3, #1
 8001b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	fb03 f202 	mul.w	r2, r3, r2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	0e5b      	lsrs	r3, r3, #25
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08002a20 	.word	0x08002a20
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4904      	ldr	r1, [pc, #16]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08002a18 	.word	0x08002a18

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c1c:	f7ff ffda 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0adb      	lsrs	r3, r3, #11
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4904      	ldr	r1, [pc, #16]	@ (8001c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08002a18 	.word	0x08002a18

08001c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c5c:	f7ff f968 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001c60:	6178      	str	r0, [r7, #20]
 8001c62:	e014      	b.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	4a24      	ldr	r2, [pc, #144]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c70:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c7c:	f7ff f958 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	4a1d      	ldr	r2, [pc, #116]	@ (8001cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c94:	d10b      	bne.n	8001cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b80      	cmp	r3, #128	@ 0x80
 8001c9a:	d919      	bls.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ca0:	d902      	bls.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	e013      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	e010      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b80      	cmp	r3, #128	@ 0x80
 8001cb2:	d902      	bls.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	e00a      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b80      	cmp	r3, #128	@ 0x80
 8001cbe:	d102      	bne.n	8001cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e004      	b.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b70      	cmp	r3, #112	@ 0x70
 8001cca:	d101      	bne.n	8001cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ccc:	2301      	movs	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4909      	ldr	r1, [pc, #36]	@ (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40022000 	.word	0x40022000

08001d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d10:	2300      	movs	r3, #0
 8001d12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 809e 	beq.w	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d26:	4b46      	ldr	r3, [pc, #280]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4b40      	ldr	r3, [pc, #256]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	4a3f      	ldr	r2, [pc, #252]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d48:	4b3d      	ldr	r3, [pc, #244]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d58:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a39      	ldr	r2, [pc, #228]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d64:	f7fe fe2a 	bl	80009bc <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d6a:	e009      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6c:	f7fe fe26 	bl	80009bc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d902      	bls.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	74fb      	strb	r3, [r7, #19]
        break;
 8001d7e:	e005      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d80:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001d8c:	7cfb      	ldrb	r3, [r7, #19]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d15a      	bne.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01e      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d019      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001db8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001dba:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dca:	4b1d      	ldr	r3, [pc, #116]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dda:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d016      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7fe fde6 	bl	80009bc <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	e00b      	b.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7fe fde2 	bl	80009bc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d902      	bls.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	74fb      	strb	r3, [r7, #19]
            break;
 8001e0a:	e006      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ec      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4904      	ldr	r1, [pc, #16]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e36:	e009      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	74bb      	strb	r3, [r7, #18]
 8001e3c:	e006      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4c:	7c7b      	ldrb	r3, [r7, #17]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b6e      	ldr	r3, [pc, #440]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e56:	4a6d      	ldr	r2, [pc, #436]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e6a:	4b68      	ldr	r3, [pc, #416]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e70:	f023 0203 	bic.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4964      	ldr	r1, [pc, #400]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e92:	f023 020c 	bic.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	495c      	ldr	r1, [pc, #368]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eae:	4b57      	ldr	r3, [pc, #348]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4953      	ldr	r1, [pc, #332]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	494b      	ldr	r1, [pc, #300]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ef2:	4b46      	ldr	r3, [pc, #280]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4942      	ldr	r1, [pc, #264]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f14:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	493a      	ldr	r1, [pc, #232]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f36:	4b35      	ldr	r3, [pc, #212]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4931      	ldr	r1, [pc, #196]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f58:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4929      	ldr	r1, [pc, #164]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f7a:	4b24      	ldr	r3, [pc, #144]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	4920      	ldr	r1, [pc, #128]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d015      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	4918      	ldr	r1, [pc, #96]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a12      	ldr	r2, [pc, #72]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d015      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	490a      	ldr	r1, [pc, #40]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff4:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a04      	ldr	r2, [pc, #16]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ffe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002000:	7cbb      	ldrb	r3, [r7, #18]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e040      	b.n	80020a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d106      	bne.n	8002038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fb8e 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2224      	movs	r2, #36	@ 0x24
 800203c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa82 	bl	8002560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f825 	bl	80020ac <UART_SetConfig>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e01b      	b.n	80020a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800207a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800208a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fb01 	bl	80026a4 <UART_CheckIdleState>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b0:	b08a      	sub	sp, #40	@ 0x28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b9e      	ldr	r3, [pc, #632]	@ (8002354 <UART_SetConfig+0x2a8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a93      	ldr	r2, [pc, #588]	@ (8002358 <UART_SetConfig+0x2ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002114:	4313      	orrs	r3, r2
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a8a      	ldr	r2, [pc, #552]	@ (800235c <UART_SetConfig+0x2b0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d126      	bne.n	8002184 <UART_SetConfig+0xd8>
 8002136:	4b8a      	ldr	r3, [pc, #552]	@ (8002360 <UART_SetConfig+0x2b4>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d81b      	bhi.n	800217c <UART_SetConfig+0xd0>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <UART_SetConfig+0xa0>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	0800215d 	.word	0x0800215d
 8002150:	0800216d 	.word	0x0800216d
 8002154:	08002165 	.word	0x08002165
 8002158:	08002175 	.word	0x08002175
 800215c:	2301      	movs	r3, #1
 800215e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002162:	e0ab      	b.n	80022bc <UART_SetConfig+0x210>
 8002164:	2302      	movs	r3, #2
 8002166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800216a:	e0a7      	b.n	80022bc <UART_SetConfig+0x210>
 800216c:	2304      	movs	r3, #4
 800216e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002172:	e0a3      	b.n	80022bc <UART_SetConfig+0x210>
 8002174:	2308      	movs	r3, #8
 8002176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800217a:	e09f      	b.n	80022bc <UART_SetConfig+0x210>
 800217c:	2310      	movs	r3, #16
 800217e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002182:	e09b      	b.n	80022bc <UART_SetConfig+0x210>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a76      	ldr	r2, [pc, #472]	@ (8002364 <UART_SetConfig+0x2b8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d138      	bne.n	8002200 <UART_SetConfig+0x154>
 800218e:	4b74      	ldr	r3, [pc, #464]	@ (8002360 <UART_SetConfig+0x2b4>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b0c      	cmp	r3, #12
 800219a:	d82d      	bhi.n	80021f8 <UART_SetConfig+0x14c>
 800219c:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <UART_SetConfig+0xf8>)
 800219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a2:	bf00      	nop
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080021f9 	.word	0x080021f9
 80021ac:	080021f9 	.word	0x080021f9
 80021b0:	080021f9 	.word	0x080021f9
 80021b4:	080021e9 	.word	0x080021e9
 80021b8:	080021f9 	.word	0x080021f9
 80021bc:	080021f9 	.word	0x080021f9
 80021c0:	080021f9 	.word	0x080021f9
 80021c4:	080021e1 	.word	0x080021e1
 80021c8:	080021f9 	.word	0x080021f9
 80021cc:	080021f9 	.word	0x080021f9
 80021d0:	080021f9 	.word	0x080021f9
 80021d4:	080021f1 	.word	0x080021f1
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021de:	e06d      	b.n	80022bc <UART_SetConfig+0x210>
 80021e0:	2302      	movs	r3, #2
 80021e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021e6:	e069      	b.n	80022bc <UART_SetConfig+0x210>
 80021e8:	2304      	movs	r3, #4
 80021ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021ee:	e065      	b.n	80022bc <UART_SetConfig+0x210>
 80021f0:	2308      	movs	r3, #8
 80021f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021f6:	e061      	b.n	80022bc <UART_SetConfig+0x210>
 80021f8:	2310      	movs	r3, #16
 80021fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021fe:	e05d      	b.n	80022bc <UART_SetConfig+0x210>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a58      	ldr	r2, [pc, #352]	@ (8002368 <UART_SetConfig+0x2bc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d125      	bne.n	8002256 <UART_SetConfig+0x1aa>
 800220a:	4b55      	ldr	r3, [pc, #340]	@ (8002360 <UART_SetConfig+0x2b4>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002214:	2b30      	cmp	r3, #48	@ 0x30
 8002216:	d016      	beq.n	8002246 <UART_SetConfig+0x19a>
 8002218:	2b30      	cmp	r3, #48	@ 0x30
 800221a:	d818      	bhi.n	800224e <UART_SetConfig+0x1a2>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d00a      	beq.n	8002236 <UART_SetConfig+0x18a>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d814      	bhi.n	800224e <UART_SetConfig+0x1a2>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <UART_SetConfig+0x182>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d008      	beq.n	800223e <UART_SetConfig+0x192>
 800222c:	e00f      	b.n	800224e <UART_SetConfig+0x1a2>
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002234:	e042      	b.n	80022bc <UART_SetConfig+0x210>
 8002236:	2302      	movs	r3, #2
 8002238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800223c:	e03e      	b.n	80022bc <UART_SetConfig+0x210>
 800223e:	2304      	movs	r3, #4
 8002240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002244:	e03a      	b.n	80022bc <UART_SetConfig+0x210>
 8002246:	2308      	movs	r3, #8
 8002248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800224c:	e036      	b.n	80022bc <UART_SetConfig+0x210>
 800224e:	2310      	movs	r3, #16
 8002250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002254:	e032      	b.n	80022bc <UART_SetConfig+0x210>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a3f      	ldr	r2, [pc, #252]	@ (8002358 <UART_SetConfig+0x2ac>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d12a      	bne.n	80022b6 <UART_SetConfig+0x20a>
 8002260:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <UART_SetConfig+0x2b4>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800226a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800226e:	d01a      	beq.n	80022a6 <UART_SetConfig+0x1fa>
 8002270:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002274:	d81b      	bhi.n	80022ae <UART_SetConfig+0x202>
 8002276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800227a:	d00c      	beq.n	8002296 <UART_SetConfig+0x1ea>
 800227c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002280:	d815      	bhi.n	80022ae <UART_SetConfig+0x202>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <UART_SetConfig+0x1e2>
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228a:	d008      	beq.n	800229e <UART_SetConfig+0x1f2>
 800228c:	e00f      	b.n	80022ae <UART_SetConfig+0x202>
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002294:	e012      	b.n	80022bc <UART_SetConfig+0x210>
 8002296:	2302      	movs	r3, #2
 8002298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800229c:	e00e      	b.n	80022bc <UART_SetConfig+0x210>
 800229e:	2304      	movs	r3, #4
 80022a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022a4:	e00a      	b.n	80022bc <UART_SetConfig+0x210>
 80022a6:	2308      	movs	r3, #8
 80022a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022ac:	e006      	b.n	80022bc <UART_SetConfig+0x210>
 80022ae:	2310      	movs	r3, #16
 80022b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80022b4:	e002      	b.n	80022bc <UART_SetConfig+0x210>
 80022b6:	2310      	movs	r3, #16
 80022b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a25      	ldr	r2, [pc, #148]	@ (8002358 <UART_SetConfig+0x2ac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	f040 808a 	bne.w	80023dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80022c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d824      	bhi.n	800231a <UART_SetConfig+0x26e>
 80022d0:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <UART_SetConfig+0x22c>)
 80022d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d6:	bf00      	nop
 80022d8:	080022fd 	.word	0x080022fd
 80022dc:	0800231b 	.word	0x0800231b
 80022e0:	08002305 	.word	0x08002305
 80022e4:	0800231b 	.word	0x0800231b
 80022e8:	0800230b 	.word	0x0800230b
 80022ec:	0800231b 	.word	0x0800231b
 80022f0:	0800231b 	.word	0x0800231b
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	08002313 	.word	0x08002313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022fc:	f7ff fc76 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8002300:	61f8      	str	r0, [r7, #28]
        break;
 8002302:	e010      	b.n	8002326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <UART_SetConfig+0x2c0>)
 8002306:	61fb      	str	r3, [r7, #28]
        break;
 8002308:	e00d      	b.n	8002326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800230a:	f7ff fbd7 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 800230e:	61f8      	str	r0, [r7, #28]
        break;
 8002310:	e009      	b.n	8002326 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002316:	61fb      	str	r3, [r7, #28]
        break;
 8002318:	e005      	b.n	8002326 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8109 	beq.w	8002540 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	429a      	cmp	r2, r3
 800233c:	d305      	bcc.n	800234a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	429a      	cmp	r2, r3
 8002348:	d912      	bls.n	8002370 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002350:	e0f6      	b.n	8002540 <UART_SetConfig+0x494>
 8002352:	bf00      	nop
 8002354:	efff69f3 	.word	0xefff69f3
 8002358:	40008000 	.word	0x40008000
 800235c:	40013800 	.word	0x40013800
 8002360:	40021000 	.word	0x40021000
 8002364:	40004400 	.word	0x40004400
 8002368:	40004800 	.word	0x40004800
 800236c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2200      	movs	r2, #0
 8002374:	461c      	mov	r4, r3
 8002376:	4615      	mov	r5, r2
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	022b      	lsls	r3, r5, #8
 8002382:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002386:	0222      	lsls	r2, r4, #8
 8002388:	68f9      	ldr	r1, [r7, #12]
 800238a:	6849      	ldr	r1, [r1, #4]
 800238c:	0849      	lsrs	r1, r1, #1
 800238e:	2000      	movs	r0, #0
 8002390:	4688      	mov	r8, r1
 8002392:	4681      	mov	r9, r0
 8002394:	eb12 0a08 	adds.w	sl, r2, r8
 8002398:	eb43 0b09 	adc.w	fp, r3, r9
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023aa:	4650      	mov	r0, sl
 80023ac:	4659      	mov	r1, fp
 80023ae:	f7fd ff0d 	bl	80001cc <__aeabi_uldivmod>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4613      	mov	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80023c0:	d308      	bcc.n	80023d4 <UART_SetConfig+0x328>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023c8:	d204      	bcs.n	80023d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	e0b5      	b.n	8002540 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80023da:	e0b1      	b.n	8002540 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023e4:	d15d      	bne.n	80024a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80023e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d827      	bhi.n	800243e <UART_SetConfig+0x392>
 80023ee:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <UART_SetConfig+0x348>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002419 	.word	0x08002419
 80023f8:	08002421 	.word	0x08002421
 80023fc:	08002429 	.word	0x08002429
 8002400:	0800243f 	.word	0x0800243f
 8002404:	0800242f 	.word	0x0800242f
 8002408:	0800243f 	.word	0x0800243f
 800240c:	0800243f 	.word	0x0800243f
 8002410:	0800243f 	.word	0x0800243f
 8002414:	08002437 	.word	0x08002437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002418:	f7ff fbe8 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 800241c:	61f8      	str	r0, [r7, #28]
        break;
 800241e:	e014      	b.n	800244a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002420:	f7ff fbfa 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002424:	61f8      	str	r0, [r7, #28]
        break;
 8002426:	e010      	b.n	800244a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002428:	4b4c      	ldr	r3, [pc, #304]	@ (800255c <UART_SetConfig+0x4b0>)
 800242a:	61fb      	str	r3, [r7, #28]
        break;
 800242c:	e00d      	b.n	800244a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800242e:	f7ff fb45 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 8002432:	61f8      	str	r0, [r7, #28]
        break;
 8002434:	e009      	b.n	800244a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243a:	61fb      	str	r3, [r7, #28]
        break;
 800243c:	e005      	b.n	800244a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d077      	beq.n	8002540 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005a      	lsls	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	441a      	add	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	fbb2 f3f3 	udiv	r3, r2, r3
 8002464:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d916      	bls.n	800249a <UART_SetConfig+0x3ee>
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002472:	d212      	bcs.n	800249a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f023 030f 	bic.w	r3, r3, #15
 800247c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b29a      	uxth	r2, r3
 800248a:	8afb      	ldrh	r3, [r7, #22]
 800248c:	4313      	orrs	r3, r2
 800248e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	8afa      	ldrh	r2, [r7, #22]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	e052      	b.n	8002540 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80024a0:	e04e      	b.n	8002540 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d827      	bhi.n	80024fa <UART_SetConfig+0x44e>
 80024aa:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <UART_SetConfig+0x404>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	080024d5 	.word	0x080024d5
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	080024e5 	.word	0x080024e5
 80024bc:	080024fb 	.word	0x080024fb
 80024c0:	080024eb 	.word	0x080024eb
 80024c4:	080024fb 	.word	0x080024fb
 80024c8:	080024fb 	.word	0x080024fb
 80024cc:	080024fb 	.word	0x080024fb
 80024d0:	080024f3 	.word	0x080024f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024d4:	f7ff fb8a 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 80024d8:	61f8      	str	r0, [r7, #28]
        break;
 80024da:	e014      	b.n	8002506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80024dc:	f7ff fb9c 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 80024e0:	61f8      	str	r0, [r7, #28]
        break;
 80024e2:	e010      	b.n	8002506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <UART_SetConfig+0x4b0>)
 80024e6:	61fb      	str	r3, [r7, #28]
        break;
 80024e8:	e00d      	b.n	8002506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024ea:	f7ff fae7 	bl	8001abc <HAL_RCC_GetSysClockFreq>
 80024ee:	61f8      	str	r0, [r7, #28]
        break;
 80024f0:	e009      	b.n	8002506 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80024f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024f6:	61fb      	str	r3, [r7, #28]
        break;
 80024f8:	e005      	b.n	8002506 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002504:	bf00      	nop
    }

    if (pclk != 0U)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d019      	beq.n	8002540 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	085a      	lsrs	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	441a      	add	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d909      	bls.n	800253a <UART_SetConfig+0x48e>
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d205      	bcs.n	800253a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60da      	str	r2, [r3, #12]
 8002538:	e002      	b.n	8002540 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800254c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	@ 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255a:	bf00      	nop
 800255c:	00f42400 	.word	0x00f42400

08002560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01a      	beq.n	8002676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800265e:	d10a      	bne.n	8002676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
  }
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b098      	sub	sp, #96	@ 0x60
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026b4:	f7fe f982 	bl	80009bc <HAL_GetTick>
 80026b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d12e      	bne.n	8002726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f88c 	bl	80027f4 <UART_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d021      	beq.n	8002726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	e853 3f00 	ldrex	r3, [r3]
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80026f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002700:	647b      	str	r3, [r7, #68]	@ 0x44
 8002702:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002708:	e841 2300 	strex	r3, r2, [r1]
 800270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800270e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e6      	bne.n	80026e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e062      	b.n	80027ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d149      	bne.n	80027c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f856 	bl	80027f4 <UART_WaitOnFlagUntilTimeout>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d03c      	beq.n	80027c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	623b      	str	r3, [r7, #32]
   return(result);
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
 800276e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002774:	e841 2300 	strex	r3, r2, [r1]
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e6      	bne.n	800274e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3308      	adds	r3, #8
 8002786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	e853 3f00 	ldrex	r3, [r3]
 800278e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3308      	adds	r3, #8
 800279e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027a0:	61fa      	str	r2, [r7, #28]
 80027a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a4:	69b9      	ldr	r1, [r7, #24]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	e841 2300 	strex	r3, r2, [r1]
 80027ac:	617b      	str	r3, [r7, #20]
   return(result);
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e5      	bne.n	8002780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e011      	b.n	80027ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3758      	adds	r7, #88	@ 0x58
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002804:	e04f      	b.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d04b      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7fe f8d5 	bl	80009bc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <UART_WaitOnFlagUntilTimeout+0x30>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e04e      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d037      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b80      	cmp	r3, #128	@ 0x80
 800283a:	d034      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b40      	cmp	r3, #64	@ 0x40
 8002840:	d031      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d110      	bne.n	8002872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2208      	movs	r2, #8
 8002856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f838 	bl	80028ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2208      	movs	r2, #8
 8002862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e029      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002880:	d111      	bne.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800288a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f81e 	bl	80028ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e00f      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d0a0      	beq.n	8002806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b095      	sub	sp, #84	@ 0x54
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80028f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e6      	bne.n	80028d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3308      	adds	r3, #8
 800290e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	61fb      	str	r3, [r7, #28]
   return(result);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f023 0301 	bic.w	r3, r3, #1
 800291e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3308      	adds	r3, #8
 8002926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800292e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002940:	2b01      	cmp	r3, #1
 8002942:	d118      	bne.n	8002976 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	60bb      	str	r3, [r7, #8]
   return(result);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f023 0310 	bic.w	r3, r3, #16
 8002958:	647b      	str	r3, [r7, #68]	@ 0x44
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	6979      	ldr	r1, [r7, #20]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	613b      	str	r3, [r7, #16]
   return(result);
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e6      	bne.n	8002944 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800298a:	bf00      	nop
 800298c:	3754      	adds	r7, #84	@ 0x54
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <memset>:
 8002996:	4402      	add	r2, r0
 8002998:	4603      	mov	r3, r0
 800299a:	4293      	cmp	r3, r2
 800299c:	d100      	bne.n	80029a0 <memset+0xa>
 800299e:	4770      	bx	lr
 80029a0:	f803 1b01 	strb.w	r1, [r3], #1
 80029a4:	e7f9      	b.n	800299a <memset+0x4>
	...

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	@ (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	@ (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	@ (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	@ (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 f818 	bl	80029f0 <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a58 	.word	0x08002a58
 80029e4:	08002a58 	.word	0x08002a58
 80029e8:	08002a58 	.word	0x08002a58
 80029ec:	08002a5c 	.word	0x08002a5c

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
